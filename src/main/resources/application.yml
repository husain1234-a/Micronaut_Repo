micronaut:
  application:
    name: user-management
  router:
    static-resources:
      swagger:
        paths: classpath:META-INF/swagger
        mapping: /swagger/**
      swagger-ui:
        paths: classpath:META-INF/swagger/views/swagger-ui
        mapping: /swagger-ui/**
  server:
    port: 8080
    cors:
      enabled: true
  data:
    jdbc:
      repositories:
        enabled: true
      default:
        enabled: true
        dialect: POSTGRES
        schema-generate: CREATE
        schema-generate-sources: CLASSES
        schema-generate-databases: true
        schema-generate-create: true
        schema-generate-drop: true
        schema-generate-create-sources: CLASSES
        schema-generate-drop-sources: CLASSES
  security:
    enabled: false
  email:
    from: noreply@example.com
    host: smtp.gmail.com
    username: ${MAIL_USERNAME:vbook.yash@gmail.com}
    password: ${MAIL_PASSWORD:thke xcps iqru fcfd}
    transport:
      protocol: smtp
      properties:
        mail:
          smtp:
            host: smtp.gmail.com
            port: 587
            auth: true
            starttls:
              enable: true
            ssl:
              trust: smtp.gmail.com
            user: ${MAIL_USERNAME:vbook.yash@gmail.com}
            password: ${MAIL_PASSWORD:thke xcps iqru fcfd}

# âœ… Moved JavaMail properties to root level
javamail:
  properties:
    mail:
      smtp:
        host: smtp.gmail.com
        port: 587
        auth: true
        starttls:
          enable: true
        ssl:
          trust: smtp.gmail.com
        username: ${MAIL_USERNAME:vbook.yash@gmail.com}
        password: ${MAIL_PASSWORD:thke xcps iqru fcfd}

datasources:
  default:
    url: jdbc:postgresql://localhost:5432/usermanagement
    username: postgres
    password: admin123
    driverClassName: org.postgresql.Driver
    dialect: POSTGRES
    schema-generate:
      create: true
      use-foreign-keys: true
    db-type: postgres
    poolName: HikariPool
    maximumPoolSize: 10
    minimumIdle: 5
    idleTimeout: 300000
    connectionTimeout: 20000
    maxLifetime: 1200000
    validationQuery: "SELECT 1"
    testOnBorrow: true
    testWhileIdle: true
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    jmxEnabled: true

# DynamoDB Configuration
dynamodb:
  endpoint: http://localhost:8000

# AWS Configuration
aws:
  region: us-east-1
  credentials:
    access-key-id: dummy
    secret-access-key: dummy

swagger:
  title: User Management API
  version: 1.0.0
  description: API for managing users and their notifications

openapi:
  title: User Management API
  version: 1.0
  description: API for managing users and their addresses